---
# tasks file for /vagrant/playbooks/roles/xen-enforce-bot

- when: not xen_is_vagrant and xen_clone_with_git
  block:

    - name: Install Git
      become: true
      ansible.builtin.yum:
        name: git
        state: present

    - name: Clone Xen Enforce Bot Source
      become: true
      ansible.builtin.git:
        repo: "{{ xen_git_repo }}"
        dest: "{{ xen_bot_dir }}"


- name: Copy Xen Enforce Bot Source
  become: true
  when: not xen_is_vagrant and not xen_clone_with_git
  ansible.builtin.copy:
    src: ../../../
    dest: "{{ xen_bot_dir }}"

- name: Create MySQL Database
  become: true
  community.mysql.mysql_db:
    ca_cert: "{{ xen_mysql_ca }}"
    client_cert: "{{ xen_mysql_client_cert }}"
    client_key: "{{ xen_mysql_client_key }}"
    check_hostname: false
    login_user: "{{ xen_mysql_root_username }}"
    login_password: "{{ xen_mysql_root_password }}"
    name: "{{ xen_mysql_database }}"
    state: import
    target: "{{ xen_bot_dir }}/Xen-Enforce-Bot/xenfbot4schema.sql"
  no_log: true

- name: Create MySQL User
  become: true
  community.mysql.mysql_user:
    ca_cert: "{{ xen_mysql_ca }}"
    client_cert: "{{ xen_mysql_client_cert }}"
    client_key: "{{ xen_mysql_client_key }}"
    check_hostname: false
    login_user: "{{ xen_mysql_root_username }}"
    login_password: "{{ xen_mysql_root_password }}"
    name: "{{ xen_mysql_user_username }}"
    host: "{{ xen_mysql_user_host }}"
    password: "{{ xen_mysql_user_password }}"
    state: present
    priv: "{{ xen_mysql_database }}.*:ALL"

- name: Add Microsoft RPM
  become: true
  ansible.builtin.yum:
    name: https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
    state: present

- name: Enable PHP 7.4
  become: true
  command: amazon-linux-extras enable php7.4

- name: Install Packages
  become: true
  ansible.builtin.yum:
    name:
      - httpd
      - php
      - php-mysqlnd
      - dotnet-sdk-3.1
    state: present

- name: Add Apache User to MySQL SSL Group
  become: true
  ansible.builtin.user:
    name: apache
    groups: "{{ xen_mysql_ssl_group }}"
    append: true

- name: Template Apache Virtual Hosts Config
  become: true
  ansible.builtin.template:
    src: virtual-hosts.conf
    dest: /etc/httpd/conf.d/virtual-hosts.conf
  notify: Restart httpd

- name: Start Apache
  become: true
  ansible.builtin.service:
    name: httpd
    state: started
    enabled: true

- name: Create UI Directory Structure
  become: true
  ansible.builtin.file:
    name: "/var/www/html/xen-enforce-bot/{{ item.path }}"
    owner: apache
    mode: 0700
    state: directory
  with_community.general.filetree: ../../../../webui
  when: item.state == 'directory'

- name: Template UI PHP Files
  become: true
  ansible.builtin.template:
    src: "{{ item.src }}"
    owner: apache
    dest: "/var/www/html/xen-enforce-bot/{{ item.path }}"
    mode: 0700
  with_community.general.filetree: ../../../../webui
  when: item.state == 'file' and item.path.endswith('.php')

- name: Copy All Other UI Files
  become: true
  ansible.builtin.copy:
    src: "{{ item.src }}"
    owner: apache
    dest: "/var/www/html/xen-enforce-bot/{{ item.path }}"
    mode: 0700
  with_community.general.filetree: ../../../../webui
  when: item.state == 'file' and not item.path.endswith('.php')

- name: Compile Xen Enforce Bot
  become: true
  command:
    cmd: dotnet build --configuration=Release
    chdir: "{{ xen_bot_dir }}/Xen-Enforce-Bot"

- name: Create Xen Enforce Bot Service File
  become: true
  ansible.builtin.template:
    src: xen-enforce-bot.service
    dest: /etc/systemd/system/xen-enforce-bot.service
    mode: 0700
  notify: Restart Xen Enforce Bot

- name: Start Xen Enforce Bot Service
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    name: xen-enforce-bot
    state: started
    enabled: true
