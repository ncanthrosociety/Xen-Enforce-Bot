---

- name: Install Python MySQL Module
  become: true
  ansible.builtin.pip:
    name: PyMySQL<1.0.0
    state: present

- name: Install Percona-Release
  become: true
  ansible.builtin.yum:
    name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
    state: present

- name: Enable Percona Xtradb Cluster Repo
  become: true
  command: percona-release enable {{ percona_xtradb_cluster_repo }}

- name: Install Percona Xtradb Cluster
  become: true
  ansible.builtin.yum:
    name: "{{ percona_package_name }}"
    state: present
    update_cache: true

- name: Create MySQL SSL Group
  become: true
  ansible.builtin.group:
    name: "{{ percona_ssl_group }}"
    state: present

- name: Add mysql to SSL Group
  become: true
  ansible.builtin.user:
    name: mysql
    groups: "{{ percona_ssl_group }}"
    append: true

- name: Add Ansible User to SSL Group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: "{{ percona_ssl_group }}"
    append: true

- name: Create MySQL SSL Dir
  become: true
  ansible.builtin.file:
    name: "{{ percona_ssl_dir }}"
    state: directory
    owner: root
    group: "{{ percona_ssl_group }}"

- name: Generate SSL/RSA Files
  become: true
  command: mysql_ssl_rsa_setup --datadir='{{ percona_ssl_dir }}'

# Note, the ansible user is added to the correct group, but that membership will
# not refresh during the current session. We could use `meta: reset_connection`,
# but that isn't supported by the ansible local connection used by Vagrant.
# Instead, make sure all MySQL commands are run with `become: true`, because
# root does have the corrrect permissions.
- name: Set SSL/RSA File Permissions
  become: true
  ansible.builtin.file:
    name: "{{ percona_ssl_dir }}"
    state: directory
    owner: root
    group: "{{ percona_ssl_group }}"
    mode: 0770
    recurse: true

- name: Template MySQL Server Config Files
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/my.cnf.d/{{ item }}
    mode: 0600
  with_items:
    - encryption.cnf
    - root.cnf
    - tls.cnf
    - wsrep.cnf
  notify: Restart MySQL

- name: Template MySQL Client Config Files
  ansible.builtin.template:
    src: client.cnf
    dest: "{{ ansible_env.HOME }}/.my.cnf"
    mode: 0600

- name: Start MySQL
  become: true
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true

- name: Get Temporary Password
  become: true
  command: "grep -oP '(?<=A temporary password is generated for root@localhost: )(.*)$' /var/log/mysqld.log"
  register: percona_temporary_password
  ignore_errors: true
  changed_when: false

- name: Wait For MySQL to be Available
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: "{{ percona_mysql_port }}"

- name: Set MySQL User Password
  when: not percona_temporary_password.failed
  become: true
  command: >
    mysql -u '{{ percona_mysql_username }}' -p'{{ percona_temporary_password.stdout }}' --connect-expired-password
    --ssl-ca='{{ percona_ssl_ca }}' --ssl-cert='{{ percona_ssl_client_cert }}' --ssl-key='{{ percona_ssl_client_key }}'
    -e "ALTER USER '{{ percona_mysql_username }}'@'localhost' IDENTIFIED BY '{{ percona_mysql_password }}'"
  ignore_errors: true
  no_log: true

- name: Check MySQL User/Password
  become: true
  community.mysql.mysql_user:
    ca_cert: "{{ percona_ssl_ca }}"
    client_cert: "{{ percona_ssl_client_cert }}"
    client_key: "{{ percona_ssl_client_key }}"
    check_hostname: false
    login_user: "{{ percona_mysql_username }}"
    login_password: "{{ percona_mysql_password }}"
    name: "{{ percona_mysql_username }}"
    host: localhost
    password: "{{ percona_mysql_password }}"
    state: present

- name: Create SST User
  become: true
  community.mysql.mysql_user:
    ca_cert: "{{ percona_ssl_ca }}"
    client_cert: "{{ percona_ssl_client_cert }}"
    client_key: "{{ percona_ssl_client_key }}"
    check_hostname: false
    login_user: "{{ percona_mysql_username }}"
    login_password: "{{ percona_mysql_password }}"
    name: "{{ percona_sst_username }}"
    host: localhost
    password: "{{ percona_sst_password }}"
    state: present
    priv: "*.*:RELOAD,LOCK TABLES,PROCESS,REPLICATION CLIENT"
